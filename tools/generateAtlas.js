// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import sharp from 'sharp';           // Th∆∞ vi·ªán x·ª≠ l√Ω ·∫£nh hi·ªáu su·∫•t cao
import fs from 'fs';                 // Th∆∞ vi·ªán h·ªá th·ªëng file
import path from 'path';             // Th∆∞ vi·ªán x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n
import { fileURLToPath } from 'url'; // H√†m ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i trong ES modules

// L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c hi·ªán t·∫°i cho ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import t·∫•t c·∫£ c√°c danh s√°ch t√†i nguy√™n t·ª´ AssetConstants.js
import {
    COIN_ASSETS,
    CHARACTER_ASSETS,
    CHARACTER_SPRITE_ASSETS,
    WEAPON_SWORD_ASSETS,
    WEAPON_POLEARM_ASSETS,
    WEAPON_CLAYMORE_ASSETS,
    WEAPON_CATALYST_ASSETS,
    WEAPON_BOW_ASSETS,
    ENEMY_HILICHURL_ASSETS,
    ENEMY_ABYSS_ASSETS,
    ENEMY_SLIME_ASSETS,
    ENEMY_SHROOM_ASSETS,
    ENEMY_AUTOMATONS_ASSETS,
    ENEMY_KAIRAGI_ASSETS,
    ENEMY_EREMITE_ASSETS,
    ENEMY_FATUI_ASSETS,
    ENEMY_BOSS_ASSETS,
    FOOD_ASSETS,
    TRAP_ASSETS,
    TREASURE_ASSETS,
    BOMB_ASSETS,
    EMPTY_CARD,
    ITEM_ASSETS,
    ELEMENT_ASSETS,
    WEAPON_SWORD_BADGE_ASSETS,
    WEAPON_CATALYST_BADGE_ASSETS,
    WEAPON_CLAYMORE_BADGE_ASSETS,
    WEAPON_POLEARM_BADGE_ASSETS,
    WEAPON_BOW_BADGE_ASSETS,
} from '../src/utils/AssetConstants.js';

/**
 * H√†m t√≠nh to√°n l∆∞·ªõi t·ªëi ∆∞u cho sprite sheet
 * Thu·∫≠t to√°n t√¨m b·ªë c·ª•c g·∫ßn v·ªõi h√¨nh vu√¥ng nh·∫•t
 * @param {number} totalFrames - T·ªïng s·ªë sprite
 * @param {number} frameWidth - Chi·ªÅu r·ªông c·ªßa m·ªói sprite
 * @param {number} frameHeight - Chi·ªÅu cao c·ªßa m·ªói sprite
 * @returns {object} Th√¥ng tin l∆∞·ªõi t·ªëi ∆∞u (cols, rows, sheetW, sheetH, ratio)
 */
function bestGrid(totalFrames, frameWidth, frameHeight) {
    let best = null;
    let minDiff = Infinity;

    for (let columns = 1; columns <= totalFrames; columns++) {
        let rows = Math.ceil(totalFrames / columns);
        let sheetWidth = columns * frameWidth;
        let sheetHeight = rows * frameHeight;
        let ratio = sheetWidth / sheetHeight;
        let diff = Math.abs(ratio - 1);

        if (diff < minDiff) {
            minDiff = diff;
            best = { columns, rows, sheetWidth, sheetHeight, ratio };
        }
    }

    return best;
}


/**
 * H√†m t·∫°o sprite sheet t·ª´ danh s√°ch t√†i nguy√™n
 * @param {Array} assets - Danh s√°ch t√†i nguy√™n ·∫£nh
 * @param {string|null} outputPath - ƒê∆∞·ªùng d·∫´n l∆∞u sprite sheet (null ƒë·ªÉ t·ª± ƒë·ªông l·∫•y t·ª´ firstImagePath)
 * @param {string} sheetName - T√™n c·ªßa sprite sheet
 */
async function createAtlas(assets, outputPath = null, sheetName) {
    try {
        console.log(`\nƒêang x·ª≠ l√Ω ${sheetName}...`);
        console.log(`T√¨m th·∫•y ${assets.length} ·∫£nh`);

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ·∫£nh n√†o
        if (assets.length === 0) {
            console.log(`Kh√¥ng t√¨m th·∫•y ·∫£nh cho ${sheetName}`);
            return;
        }

        // L·∫•y k√≠ch th∆∞·ªõc c·ªßa ·∫£nh ƒë·∫ßu ti√™n ƒë·ªÉ x√°c ƒë·ªãnh k√≠ch th∆∞·ªõc sprite
        const firstImagePath = path.join(__dirname, '..', 'public', assets[0].path);
        const firstImageMetadata = await sharp(firstImagePath).metadata();
        const spriteWidth = firstImageMetadata.width;   // Chi·ªÅu r·ªông sprite
        const spriteHeight = firstImageMetadata.height; // Chi·ªÅu cao sprite

        console.log(`K√≠ch th∆∞·ªõc sprite: ${spriteWidth}x${spriteHeight}`);

        // N·∫øu outputPath kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o, t·ª± ƒë·ªông l·∫•y t·ª´ th∆∞ m·ª•c assets/images
        let finalOutputPath = outputPath;
        if (!finalOutputPath) {
            const assetsImagesDir = path.dirname(path.join(__dirname, '..', 'public', assets[0].path));
            const sheetFileName = `${sheetName.toLowerCase().replace(/\s+/g, '-')}.webp`;
            finalOutputPath = path.join(assetsImagesDir, sheetFileName);
        }

        console.log(`ƒê∆∞·ªùng d·∫´n ƒë·∫ßu ra: ${finalOutputPath}`);

        // T√≠nh to√°n l∆∞·ªõi t·ªëi ∆∞u s·ª≠ d·ª•ng h√†m bestGrid
        const grid = bestGrid(assets.length, spriteWidth, spriteHeight);
        console.log(`B·ªë c·ª•c l∆∞·ªõi: ${grid.columns}x${grid.rows} (${grid.sheetWidth}x${grid.sheetHeight})`);

        // T·∫°o canvas tr·ªëng v·ªõi k√≠ch th∆∞·ªõc ƒë√£ t√≠nh
        const canvas = sharp({
            create: {
                width: grid.sheetWidth,      // Chi·ªÅu r·ªông canvas
                height: grid.sheetHeight,     // Chi·ªÅu cao canvas
                channels: 4,             // 4 k√™nh m√†u (RGBA)
                background: { r: 0, g: 0, b: 0, alpha: 0 } // N·ªÅn trong su·ªët
            }
        });

        // Chu·∫©n b·ªã c√°c thao t√°c gh√©p ·∫£nh
        const compositeOperations = [];
        let currentIndex = 0;

        // Duy·ªát qua t·ª´ng v·ªã tr√≠ trong l∆∞·ªõi theo th·ª© t·ª± h√†ng-c·ªôt
        for (let row = 0; row < grid.rows; row++) {
            for (let col = 0; col < grid.columns; col++) {
                // N·∫øu ƒë√£ h·∫øt sprite th√¨ d·ª´ng
                if (currentIndex >= assets.length) break;

                const asset = assets[currentIndex];
                const imagePath = path.join(__dirname, '..', 'public', asset.path);

                // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
                if (!fs.existsSync(imagePath)) {
                    console.warn(`C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file: ${imagePath}`);
                    currentIndex++;
                    continue;
                }

                // T√≠nh v·ªã tr√≠ ƒë·∫∑t sprite trong l∆∞·ªõi
                const x = col * spriteWidth;   // V·ªã tr√≠ X
                const y = row * spriteHeight;  // V·ªã tr√≠ Y

                // Th√™m thao t√°c gh√©p ·∫£nh v√†o danh s√°ch
                compositeOperations.push({
                    input: imagePath,  // ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫ßu v√†o
                    top: y,            // V·ªã tr√≠ Y tr√™n canvas
                    left: x            // V·ªã tr√≠ X tr√™n canvas
                });

                console.log(`  ${asset.key}: v·ªã tr√≠ (${x}, ${y})`);
                currentIndex++;
            }
        }

        // T·∫°o sprite sheet b·∫±ng c√°ch gh√©p t·∫•t c·∫£ ·∫£nh
        const spriteSheet = await canvas.composite(compositeOperations).webp({ quality: 90 });

        // L∆∞u sprite sheet ra file
        await spriteSheet.toFile(finalOutputPath);
        console.log(`‚úì ƒê√£ l∆∞u sprite sheet: ${finalOutputPath}`);

        // T·∫°o file metadata JSON ch·ª©a th√¥ng tin chi ti·∫øt v·ªÅ sprite
        const metadata = {
            frames: {},
            meta: {
                image: path.basename(finalOutputPath),
                size: {
                    w: grid.sheetWidth,
                    h: grid.sheetHeight
                },
                scale: "1",
                path: path.relative(path.join(__dirname, '..', 'public'), finalOutputPath)
            }
        };

        // Th√™m th√¥ng tin frames cho t·ª´ng sprite
        assets.forEach((asset, index) => {
            // T√≠nh v·ªã tr√≠ c·ªßa m·ªói sprite trong l∆∞·ªõi
            const row = Math.floor(index / grid.columns);
            const col = index % grid.columns;

            metadata.frames[asset.key] = {
                frame: {
                    x: col * spriteWidth,
                    y: row * spriteHeight,
                    w: spriteWidth,
                    h: spriteHeight
                }
            };
        });

        // L∆∞u metadata ra file JSON trong th∆∞ m·ª•c src/data/sprite_sheets
        const fileName = path.basename(finalOutputPath, '.webp');
        const metadataPath = path.join(__dirname, '..', 'src', 'data', 'atlas', `${fileName}.json`);
        fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));
        console.log(`‚úì ƒê√£ l∆∞u metadata: ${metadataPath}`);

    } catch (error) {
        console.error(`L·ªói khi t·∫°o sprite sheet cho ${sheetName}:`, error);
    }
}

/**
 * H√†m ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh - X·ª≠ l√Ω t·∫•t c·∫£ c√°c lo·∫°i t√†i nguy√™n
 */
async function main() {
    try {
        console.log('üé® DungeonCard Advanced Sprite Sheet Generator');
        console.log('==============================================');

        // T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra cho JSON metadata n·∫øu ch∆∞a c√≥
        const jsonOutputDir = path.join(__dirname, '..', 'src', 'data', 'atlas');
        if (!fs.existsSync(jsonOutputDir)) {
            fs.mkdirSync(jsonOutputDir, { recursive: true });
            console.log(`ƒê√£ t·∫°o th∆∞ m·ª•c ƒë·∫ßu ra cho JSON: ${jsonOutputDir}`);
        }

        // ƒê·ªãnh nghƒ©a c√°c nh√≥m t√†i nguy√™n c·∫ßn x·ª≠ l√Ω
        const assetGroups = [
            { name: 'Item', assets: ITEM_ASSETS },                              // V·∫≠t ph·∫©m
            { name: 'Element', assets: ELEMENT_ASSETS },
            { name: 'Coin', assets: COIN_ASSETS },                             // Ti·ªÅn xu


            { name: 'Character', assets: CHARACTER_ASSETS },                   // Nh√¢n v·∫≠t

            { name: 'Enemy Hilichurl', assets: ENEMY_HILICHURL_ASSETS },      // K·∫ª ƒë·ªãch Hilichurl
            { name: 'Enemy Abyss', assets: ENEMY_ABYSS_ASSETS },              // K·∫ª ƒë·ªãch Abyss
            { name: 'Enemy Slime', assets: ENEMY_SLIME_ASSETS },              // K·∫ª ƒë·ªãch Slime
            { name: 'Enemy Shroom', assets: ENEMY_SHROOM_ASSETS },            // K·∫ª ƒë·ªãch Shroom
            { name: 'Enemy Automatons', assets: ENEMY_AUTOMATONS_ASSETS },    // K·∫ª ƒë·ªãch Automatons
            { name: 'Enemy Kairagi', assets: ENEMY_KAIRAGI_ASSETS },          // K·∫ª ƒë·ªãch Kairagi
            { name: 'Enemy Eremite', assets: ENEMY_EREMITE_ASSETS },          // K·∫ª ƒë·ªãch Eremite
            { name: 'Enemy Fatui', assets: ENEMY_FATUI_ASSETS },              // K·∫ª ƒë·ªãch Fatui
            { name: 'Enemy Boss', assets: ENEMY_BOSS_ASSETS },                // K·∫ª ƒë·ªãch Boss

            { name: 'Weapon Sword', assets: WEAPON_SWORD_ASSETS },             // V≈© kh√≠ ki·∫øm
            { name: 'Weapon Polearm', assets: WEAPON_POLEARM_ASSETS },         // V≈© kh√≠ gi√°o
            { name: 'Weapon Claymore', assets: WEAPON_CLAYMORE_ASSETS },       // V≈© kh√≠ ƒë·∫°i ki·∫øm
            { name: 'Weapon Catalyst', assets: WEAPON_CATALYST_ASSETS },       // V≈© kh√≠ ph√°p kh√≠
            { name: 'Weapon Bow', assets: WEAPON_BOW_ASSETS },                 // V≈© kh√≠ cung

            { name: 'Food', assets: FOOD_ASSETS },                              // Th·ª©c ƒÉn
            { name: 'Trap', assets: TRAP_ASSETS },                              // C·∫£m bi·∫øn
            { name: 'Treasure', assets: TREASURE_ASSETS },                      // Kho b√°u
            { name: 'Bomb', assets: BOMB_ASSETS },                              // Bomb

            { name: 'Weapon Sword Badge', assets: WEAPON_SWORD_BADGE_ASSETS },   // B·∫£ng ƒë·ªãnh danh v≈© kh√≠ ki·∫øm
            { name: 'Weapon Catalyst Badge', assets: WEAPON_CATALYST_BADGE_ASSETS }, // B·∫£ng ƒë·ªãnh danh v≈© kh√≠ ph√°p kh√≠
            { name: 'Weapon Claymore Badge', assets: WEAPON_CLAYMORE_BADGE_ASSETS },   // B·∫£ng ƒë·ªãnh danh v≈© kh√≠ ƒë·∫°i ki·∫øm
            { name: 'Weapon Polearm Badge', assets: WEAPON_POLEARM_BADGE_ASSETS },     // B·∫£ng ƒë·ªãnh danh v≈© kh√≠ gi√°o
            { name: 'Weapon Bow Badge', assets: WEAPON_BOW_BADGE_ASSETS }             // B·∫£ng ƒë·ªãnh danh v≈© kh√≠ cung
        ];

        // X·ª≠ l√Ω t·ª´ng nh√≥m t√†i nguy√™n ri√™ng bi·ªát
        for (const group of assetGroups) {
            if (group.assets && group.assets.length > 0) {
                // Truy·ªÅn null ƒë·ªÉ t·ª± ƒë·ªông l·∫•y v·ªã tr√≠ t·ª´ th∆∞ m·ª•c ch·ª©a firstImagePath
                await createAtlas(group.assets, null, group.name);
            }
        }

        // T·∫°o sprite sheet k·∫øt h·ª£p cho t·∫•t c·∫£ k·∫ª ƒë·ªãch
        const allEnemyAssets = [
            ...ENEMY_HILICHURL_ASSETS,
            ...ENEMY_ABYSS_ASSETS,
            ...ENEMY_SLIME_ASSETS,
            ...ENEMY_SHROOM_ASSETS,
            ...ENEMY_AUTOMATONS_ASSETS,
            ...ENEMY_KAIRAGI_ASSETS,
            ...ENEMY_EREMITE_ASSETS,
            ...ENEMY_FATUI_ASSETS,
            ...ENEMY_BOSS_ASSETS
        ];

        if (allEnemyAssets.length > 0) {
            const sheetFileName = `${'All Enemies'.toLowerCase().replace(/\s+/g, '-')}.webp`;
            const finalOutputPath = path.join(path.join(__dirname, '..', 'public',
                'assets', 'images', 'cards', 'enemy'), sheetFileName);
            await createAtlas(allEnemyAssets, finalOutputPath, 'All Enemies');
        }

        // T·∫°o sprite sheet k·∫øt h·ª£p cho t·∫•t c·∫£ v≈© kh√≠
        const allWeaponAssets = [
            ...WEAPON_SWORD_ASSETS,         // Spread operator ƒë·ªÉ k·∫øt h·ª£p m·∫£ng
            ...WEAPON_POLEARM_ASSETS,
            ...WEAPON_CLAYMORE_ASSETS,
            ...WEAPON_CATALYST_ASSETS,
            ...WEAPON_BOW_ASSETS
        ];

        // T·∫°o sprite sheet k·∫øt h·ª£p cho t·∫•t c·∫£ weapon badges
        const allWeaponBadgeAssets = [
            ...WEAPON_SWORD_BADGE_ASSETS,
            ...WEAPON_CATALYST_BADGE_ASSETS,
            ...WEAPON_CLAYMORE_BADGE_ASSETS,
            ...WEAPON_POLEARM_BADGE_ASSETS,
            ...WEAPON_BOW_BADGE_ASSETS
        ];

        if (allWeaponBadgeAssets.length > 0) {
            const sheetFileName = `${'All Weapon Badges'.toLowerCase().replace(/\s+/g, '-')}.webp`;
            const finalOutputPath = path.join(path.join(__dirname, '..', 'public',
                'assets', 'images', 'badge'), sheetFileName);
            await createAtlas(allWeaponBadgeAssets, finalOutputPath, 'All Weapon Badges');
        }

        if (allWeaponAssets.length > 0) {
            const sheetFileName = `${'All Weapons'.toLowerCase().replace(/\s+/g, '-')}.webp`;
            const finalOutputPath = path.join(path.join(__dirname, '..', 'public',
                'assets', 'images', 'cards', 'weapon'), sheetFileName);
            await createAtlas(allWeaponAssets, finalOutputPath, 'All Weapons');
        }

        // T·∫°o sprite sheet k·∫øt h·ª£p cho t·∫•t c·∫£ c√°c th·∫ª
        console.log('\nüÉè ƒêang t·∫°o sprite sheet k·∫øt h·ª£p cho t·∫•t c·∫£ c√°c th·∫ª...');

        const allCardAssets = [
            //coin
            ...COIN_ASSETS,

            //character
            ...CHARACTER_ASSETS,

            //weapon
            ...WEAPON_SWORD_ASSETS,
            ...WEAPON_POLEARM_ASSETS,
            ...WEAPON_CLAYMORE_ASSETS,
            ...WEAPON_CATALYST_ASSETS,
            ...WEAPON_BOW_ASSETS,

            //enemy
            ...ENEMY_HILICHURL_ASSETS,
            ...ENEMY_ABYSS_ASSETS,
            ...ENEMY_SLIME_ASSETS,
            ...ENEMY_SHROOM_ASSETS,
            ...ENEMY_AUTOMATONS_ASSETS,
            ...ENEMY_KAIRAGI_ASSETS,
            ...ENEMY_EREMITE_ASSETS,
            ...ENEMY_FATUI_ASSETS,
            ...ENEMY_BOSS_ASSETS,

            //food
            ...FOOD_ASSETS,

            //trap
            ...TRAP_ASSETS,

            //treasure
            ...TREASURE_ASSETS,

            //bomb
            ...BOMB_ASSETS
        ];

        if (allCardAssets.length > 0) {
            const sheetFileName = `${'All Cards'.toLowerCase().replace(/\s+/g, '-')}.webp`;
            const finalOutputPath = path.join(path.join(__dirname, '..', 'public',
                'assets', 'images', 'cards'), sheetFileName);
            await createAtlas(allCardAssets, finalOutputPath, 'All Cards');
        }

        console.log('\nüéâ Ho√†n th√†nh t·∫°o sprite sheet!');
    } catch (error) {
        console.error('‚ùå L·ªói trong h√†m main:', error);
        process.exit(1);
    }
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
main();
