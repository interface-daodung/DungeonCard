import Phaser from 'phaser';
import { GradientText } from '../utils/GradientText.js';
import { HeaderUI } from '../utils/HeaderUI.js';
import cardCharacterList from '../data/cardCharacterList.json';
import { SpritesheetCharacter } from '../utils/SpritesheetCharacter.js';

export default class SelectCharacterScene extends Phaser.Scene {
  constructor() {
    super({ key: 'SelectCharacterScene' });

    this.cards = cardCharacterList;

    // Kh·ªüi t·∫°o currentCardIndex v·ªõi logic th√¥ng minh
    this.currentCardIndex = this.initializeCurrentCardIndex();
  }

  preload() {
    // Assets ƒë√£ ƒë∆∞·ª£c load b·ªüi LoadingScene
  }

  create() {
    const { width, height } = this.scale;

    // Background
    const background = this.add.image(width / 2, height / 2, 'background');
    background.setDisplaySize(width, height);

    // N·∫øu kh√¥ng c√≥ background image, t·∫°o background m·∫∑c ƒë·ªãnh
    if (!this.textures.exists('background')) {
      this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);
    }

    this.headerUI = HeaderUI.createHeaderUI(this, width, height);

    // Ti√™u ƒë·ªÅ
    GradientText.createGameTitle(this, 'CHARACTER', width / 2, height * 0.12);

    // Panel th√¥ng tin th·∫ª (ph√≠a tr√™n)
    this.createInfoPanel(width, height);

    // Hi·ªÉn th·ªã th·∫ª hi·ªán t·∫°i (gi·ªØa m√†n h√¨nh)
    this.createCurrentCardDisplay(width, height);

    // N√∫t navigation (tr√°i/ph·∫£i)
    this.createNavigationButtons(width, height);

    // N√∫t back v·ªÅ MenuScene
    this.createBackButton(width, height);

    // Hi·ªÉn th·ªã th·∫ª ƒë·∫ßu ti√™n
    this.updateCardDisplay();
  }

  createInfoPanel(width, height) {
    // Panel n·ªÅn
    const panelBg = this.add.graphics();
    panelBg.fillStyle(0x96576a, 0.8);
    panelBg.fillRoundedRect(width * 0.1, height * 0.15, width * 0.8, height * 0.25, 20);
    panelBg.lineStyle(3, 0x1f0614, 1);
    panelBg.strokeRoundedRect(width * 0.1, height * 0.15, width * 0.8, height * 0.25, 20);

    // Th√¥ng tin th·∫ª
    this.cardNameText = this.add.text(width * 0.5, height * 0.18, '', {
      fontSize: '32px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold'
    }).setOrigin(0.5);

    this.cardLevelText = this.add.text(width * 0.82, height * 0.18, 'level 1', {
      fontSize: '20px',
      fill: '#FFD700',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold'
    }).setOrigin(0.5);

    this.cardElementImage = this.add.image(width * 0.1 + 32, height * 0.15 + 32, 'element-cryo');
    this.cardElementImage.setDisplaySize(32, 32);

    this.cardDescriptionText = this.add.text(width * 0.5, height * 0.26, '', {
      fontSize: '20px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      wordWrap: { width: width * 0.75 },
      align: 'center'
    }).setOrigin(0.5);

    this.cardHPText = this.add.text(width * 0.5, height * 0.32, '‚ù§Ô∏è 7', {
      fontSize: '32px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      wordWrap: { width: width * 0.75 },
      align: 'center'
    }).setOrigin(0.5);
    this.cardHPText.hp = 7;

    // N√∫t Upgrade
    this.upgradeButton = this.add.text(width * 0.5, height * 0.36, 'UPGRADE', {
      fontSize: '24px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold',
      backgroundColor: '#95245b',
      padding: { x: 20, y: 10 }
    }).setOrigin(0.5);

    this.upgradeButton.setInteractive({ useHandCursor: true });
    this.upgradeButton.on('pointerover', () => {
      // Ch·ªâ hover n·∫øu ch∆∞a max level
      if (this.cards[this.currentCardIndex].level < 9) {
        this.upgradeButton.setTint(0xd1d1d1); // M√†u v√†ng gold
        this.upgradeButton.setScale(1.1);
        this.upgradeButton.setStyle({ fill: '#ffee8dff' });
        this.cardHPText.setText(`ü™ô${this.upgradeCharacterPrice()}`);
      }
    });
    this.upgradeButton.on('pointerout', () => {
      this.upgradeButton.clearTint();
      this.upgradeButton.setScale(1);
      this.upgradeButton.setStyle({ fill: '#ffffff' });
      this.cardHPText.setText(`‚ù§Ô∏è ${this.cardHPText.hp}`);
    });
    this.upgradeButton.on('pointerdown', () => {
      // Ch·ªâ upgrade n·∫øu ch∆∞a max level
      if (this.cards[this.currentCardIndex].level < 9) {
        console.log('Upgrade button clicked!');
        this.upgradeCharacter();
      }
    });
  }

  createCurrentCardDisplay(width, height) {
    // Container cho th·∫ª hi·ªán t·∫°i
    this.currentCardContainer = this.add.container(width / 2, height * 0.65);

    // Th·∫ª hi·ªán t·∫°i
    this.currentCardImage = this.add.image(0, 0, 'eula');
    this.currentCardImage.setDisplaySize(300, 514); // T·ª∑ l·ªá 7:12

    // Vi·ªÅn th·∫ª - l∆∞u reference ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi style sau n√†y
    this.cardBorder = this.add.graphics();
    this.cardBorder.lineStyle(4, 0xffffff, 1);
    this.cardBorder.fillStyle(0xffffff, 1);
    this.cardBorder.fillRoundedRect(-152, -259, 304, 518, 28);
    this.cardBorder.strokeRoundedRect(-152, -259, 304, 518, 28);

    this.currentCardContainer.add(this.cardBorder);
    this.currentCardContainer.add(this.currentCardImage);
  }

  createNavigationButtons(width, height) {
    // N√∫t Previous (tr√°i)
    this.prevButton = this.add.text(width * 0.2, height * 0.65, '‚óÄ', {
      fontSize: '28px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold',
      padding: { x: 20, y: 15 }
    }).setOrigin(0.5);

    this.prevButton.setInteractive({ useHandCursor: true });
    this.prevButton.on('pointerover', () => {
      // this.prevButton.setBackgroundColor('#2980b9');
    });
    this.prevButton.on('pointerout', () => {
      // this.prevButton.setBackgroundColor('#3498db');
    });
    this.prevButton.on('pointerdown', () => {
      this.previousCard();
    });

    // N√∫t Next (ph·∫£i)
    this.nextButton = this.add.text(width * 0.8, height * 0.65, '‚ñ∂', {
      fontSize: '28px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold',
      padding: { x: 20, y: 15 }
    }).setOrigin(0.5);

    this.nextButton.setInteractive({ useHandCursor: true });
    this.nextButton.on('pointerover', () => {
      this.nextButton.setScale(1.1);
    });
    this.nextButton.on('pointerout', () => {
      this.nextButton.setScale(1);
    });
    this.nextButton.on('pointerdown', () => {
      this.nextCard();
    });
  }

  createBackButton(width, height) {
    this.backButton = this.add.text(width * 0.5, height * 0.9, 'SELECT', {
      fontSize: '24px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold',
      backgroundColor: '#622945',
      padding: { x: 25, y: 12 }
    }).setOrigin(0.5);

    this.backButton.setInteractive({ useHandCursor: true });
    this.backButton.on('pointerover', () => {
      this.backButton.setScale(1.1);
      this.backButton.setTint(0xd1d1d1);
    });
    this.backButton.on('pointerout', () => {
      this.backButton.setScale(1);
      this.backButton.clearTint();
    });
    this.backButton.on('pointerdown', () => {
      localStorage.setItem('selectedCharacter', this.cards[this.currentCardIndex].id);
      this.scene.start('MenuScene');
    });
  }

  updateCardDisplay() {
    const currentCard = this.cards[this.currentCardIndex];

    // Load level t·ª´ localStorage
    let CharacterLevel = localStorage.getItem('CharacterLevel');
    if (CharacterLevel) {
      try {
        CharacterLevel = JSON.parse(CharacterLevel);
        if (CharacterLevel[currentCard.id]) {
          currentCard.level = CharacterLevel[currentCard.id];
        } else {
          currentCard.level = 1;
        }
      } catch (error) {
        console.warn('Error parsing CharacterLevel from localStorage:', error);
        currentCard.level = 1;
      }
    } else {
      currentCard.level = 1;
    }

    // C·∫≠p nh·∫≠t th√¥ng tin panel
    this.cardNameText.setText(currentCard.name);
    this.cardElementImage.setTexture(`element-${currentCard.element.toLowerCase()}`);
    this.cardDescriptionText.setText(currentCard.description);
    this.cardHPText.setText(`‚ù§Ô∏è ${currentCard.hp + currentCard.level - 1}`);
    this.cardLevelText.setText(`level ${currentCard.level}`);


    // Hi·ªÉn th·ªã level ho·∫∑c MAX
    if (currentCard.level >= 9) {
      this.upgradeButton.setText('MAX LEVEL');
      this.upgradeButton.setStyle({ fill: '#FFFFFF' });
      this.upgradeButton.setScale(1);
    } else {
      this.upgradeButton.setText(`UPGRADE`);
    }

    this.cardHPText.hp = currentCard.hp + currentCard.level - 1;

    // C·∫≠p nh·∫≠t h√¨nh ·∫£nh th·∫ª v√† style d·ª±a tr√™n level
    if (currentCard.level > 2) {
      // N·∫øu level > 2, s·ª≠ d·ª•ng SpritesheetCharacter.create v√† style v√†ng
      this.currentCardContainer.remove(this.currentCardImage, true);
      this.currentCardImage = SpritesheetCharacter.create(this, 0, 0, currentCard.id + '-sprite', 300, 514);
      this.currentCardContainer.add(this.currentCardImage);
      
      // Thay ƒë·ªïi style vi·ªÅn th√†nh m√†u v√†ng
      this.cardBorder.clear();
      this.cardBorder.lineStyle(4, 0xdcc06f, 1);
      this.cardBorder.fillStyle(0xdcc06f, 1);
      this.cardBorder.fillRoundedRect(-152, -259, 304, 518, 28);
      this.cardBorder.strokeRoundedRect(-152, -259, 304, 518, 28);
    } else {
      // N·∫øu level ‚â§ 2, s·ª≠ d·ª•ng image th∆∞·ªùng v√† style tr·∫Øng
      this.currentCardContainer.remove(this.currentCardImage, true);
      this.currentCardImage = this.add.image(0, 0, currentCard.id);
      this.currentCardImage.setDisplaySize(300, 514);
      this.currentCardContainer.add(this.currentCardImage);
      
      // Thay ƒë·ªïi style vi·ªÅn th√†nh m√†u tr·∫Øng
      this.cardBorder.clear();
      this.cardBorder.lineStyle(4, 0xffffff, 1);
      this.cardBorder.fillStyle(0xffffff, 1);
      this.cardBorder.fillRoundedRect(-152, -259, 304, 518, 28);
      this.cardBorder.strokeRoundedRect(-152, -259, 304, 518, 28);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t navigation
    this.prevButton.setAlpha(this.currentCardIndex === 0 ? 0.5 : 1);
    this.nextButton.setAlpha(this.currentCardIndex === this.cards.length - 1 ? 0.5 : 1);
  }

  previousCard() {
    if (this.currentCardIndex > 0) {
      this.currentCardIndex--;
      this.updateCardDisplay();
    }
  }

  nextCard() {
    if (this.currentCardIndex < this.cards.length - 1) {
      this.currentCardIndex++;
      this.updateCardDisplay();
    }
  }

  /**
   * T√≠nh gi√° upgrade character
   * @returns {number} Gi√° upgrade (level * 100)
   */
  upgradeCharacterPrice() {
    return this.cards[this.currentCardIndex].level * 100;
  }

  /**
   * Upgrade character level v√† l∆∞u v√†o localStorage
   */
  upgradeCharacter() {
    const currentCard = this.cards[this.currentCardIndex];

    // Ki·ªÉm tra max level
    if (currentCard.level >= 9) {
      console.log(`Character ${currentCard.name} is already at max level!`);
      return;
    }

    // L·∫•y CharacterLevel t·ª´ localStorage
    let CharacterLevel = localStorage.getItem('CharacterLevel');

    // N·∫øu ch∆∞a c√≥, t·∫°o object m·ªõi
    if (!CharacterLevel) {
      CharacterLevel = {};
    } else {
      // Parse JSON n·∫øu c√≥
      try {
        CharacterLevel = JSON.parse(CharacterLevel);
      } catch (error) {
        console.warn('Error parsing CharacterLevel from localStorage:', error);
        CharacterLevel = {};
      }
    }

    // TƒÉng level
    currentCard.level += 1;
    CharacterLevel[currentCard.id] = currentCard.level;

    // L∆∞u v√†o localStorage
    localStorage.setItem('CharacterLevel', JSON.stringify(CharacterLevel));

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
    this.updateCardDisplay();

    console.log(`Character ${currentCard.name} upgraded to level ${currentCard.level}`);
  }

  /**
   * Kh·ªüi t·∫°o currentCardIndex v·ªõi logic th√¥ng minh
   * @returns {number} Index c·ªßa card ƒë∆∞·ª£c ch·ªçn ho·∫∑c 0 n·∫øu kh√¥ng c√≥
   */
  initializeCurrentCardIndex() {
    // Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 0
    let defaultIndex = 0;

    // Ki·ªÉm tra xem c√≥ selectedCharacter trong localStorage kh√¥ng
    const selectedCharacter = localStorage.getItem('selectedCharacter');

    if (selectedCharacter !== null) {
      try {
        // Parse selectedCharacter ƒë·ªÉ l·∫•y object card
        const selectedCard = selectedCharacter;

        // T√¨m index c·ªßa card ƒë∆∞·ª£c ch·ªçn trong m·∫£ng cards
        const selectedIndex = this.cards.findIndex(card => card.id === selectedCard);

        if (selectedIndex !== -1) {
          // N·∫øu t√¨m th·∫•y, tr·∫£ v·ªÅ index ƒë√≥
          console.log(`SelectCharacterScene: ƒê√£ t√¨m th·∫•y selectedCharacter "${selectedCard}" t·∫°i index ${selectedIndex}`);
          return selectedIndex;
        } else {
          // N·∫øu kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
          console.warn(`SelectCharacterScene: Kh√¥ng t√¨m th·∫•y selectedCharacter "${selectedCard}" trong m·∫£ng cards, s·ª≠ d·ª•ng index m·∫∑c ƒë·ªãnh ${defaultIndex}`);
          return defaultIndex;
        }
      } catch (error) {
        // N·∫øu c√≥ l·ªói parse JSON, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
        console.warn(`SelectCharacterScene: L·ªói parse selectedCharacter, s·ª≠ d·ª•ng index m·∫∑c ƒë·ªãnh ${defaultIndex}`, error);
        return defaultIndex;
      }
    } else {
      // N·∫øu kh√¥ng c√≥ selectedCharacter, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
      console.log(`SelectCharacterScene: Kh√¥ng c√≥ selectedCharacter, s·ª≠ d·ª•ng index m·∫∑c ƒë·ªãnh ${defaultIndex}`);
      return defaultIndex;
    }
  }
}

