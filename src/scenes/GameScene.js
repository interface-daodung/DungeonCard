import Phaser from 'phaser';
import GameManager from '../core/GameManager.js';
import itemFactory from '../modules/ItemFactory.js';
import dungeonList from '../data/dungeonList.json';

export default class GameScene extends Phaser.Scene {
  constructor() {
    super({ key: 'GameScene' });
  }

  init(data) {
    const { stageId } = data || {};
    this.stageId = stageId || 'dungeon_abyss_chamber';
    this.dungeonStageName = dungeonList.find(d => d.stageId === this.stageId).name;
    console.log('GameScene: Dungeon data:', this.dungeonStageName);
    // T·∫°o GameManager m·ªõi cho m·ªói game session
    this.gameManager = new GameManager(this);
  }

  preload() {
    // KH√îNG C·∫¶N preload g√¨ n·ªØa!
    // Assets ƒë√£ ƒë∆∞·ª£c load b·ªüi LoadingScene
  }

  create() {
    // L·∫•y k√≠ch th∆∞·ªõc game
    const { width, height } = this.scale;

    // Background
    this.add.image(width / 2, height / 2, 'background');

    // Th√™m overlay t·ªëi ƒë·ªÉ l√†m n·ªïi b·∫≠t m√†n ch∆°i
    this.add.rectangle(width / 2, height / 2, width, height, 0x000000).setAlpha(0.5);

    // UI
    this.createUI();

    // T·∫°o deck cards - ƒë·∫∑t ·ªü bottom
    this.createDeck();

    // Resume audio context sau user interaction
    // this.resumeAudioContext();
  }

  createUI() {
    const { width, height } = this.scale;

    // N√∫t ‚ò∞ Menu - ƒë·∫∑t ·ªü top left
    const menuButton = this.add.text(width * 0.95, height * 0.05, '‚ò∞', {
      fontSize: '32px',
      fill: '#ffffff',
      stroke: '#2d0d21',
      strokeThickness: 2
    });
    menuButton.setInteractive({ useHandCursor: true });
    menuButton.setOrigin(0.5);
    menuButton.on('pointerover', () => {
      menuButton.setScale(1.1);
      menuButton.setTint(0xd1d1d1);
    });
    menuButton.on('pointerout', () => {
      menuButton.setScale(1);
      menuButton.clearTint();
    });
    menuButton.on('pointerdown', () => {
      this.scene.start('MenuScene');
    });

    //stage  
    this.stageText = this.add.text(width * 0.5, height * 0.035, this.dungeonStageName, {
      fontSize: '30px',
      fill: '#FFD700',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold',
      stroke: '#E69500',
      strokeThickness: 2
    }).setOrigin(0.5);

    //high score
    this.highScoreText = this.add.text(width * 0.5, height * 0.07, `High Score: ${this.gameManager.highScore}`, {
      fontSize: '20px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      // stroke: '#E69500',
      // strokeThickness: 2
    }).setOrigin(0.5).setAlpha(0.8);

    // coin v·ªõi icon ü™ô - ƒë·∫∑t ·ªü d∆∞·ªõi n√∫t menu
    this.coinText = this.add.text(width * 0.75, height * 0.13, `ü™ô${this.gameManager.coin}`, {
      fontSize: '32px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold',
      strokeThickness: 2
    });

    

    // 3 n√∫t item - l·∫•y t·ª´ localStorage v√† t·∫°o t·ª´ itemFactory
    const itemButtons = this.createItemButtonsFromStorage();
    const itemSpacing = 90; // TƒÉng kho·∫£ng c√°ch v√¨ item button l·ªõn h∆°n
    const startX = width * 0.18;

    itemButtons.forEach((item, index) => {
      this.createItemButton(startX + (index * itemSpacing), height * 0.15, item);
    });
  }

  createDeck() {
    // Kh·ªüi t·∫°o CardManager th√¥ng qua GameManager T·∫°o l∆∞·ªõi 3x3
    this.gameManager.getCardManager().initializeCreateDeck(this);
  }

  useItem(itemName) {
    // X·ª≠ l√Ω khi s·ª≠ d·ª•ng item
    console.log(`S·ª≠ d·ª•ng item: ${itemName}`);

    // C√≥ th·ªÉ th√™m logic s·ª≠ d·ª•ng item ·ªü ƒë√¢y
    // V√≠ d·ª•: tƒÉng damage, heal, buff, etc.

    // Hi·ªÉn th·ªã th√¥ng b√°o
    const { width, height } = this.scale;
    const notification = this.add.text(width / 2, height * 0.8, `ƒê√£ s·ª≠ d·ª•ng ${itemName}!`, {
      fontSize: '18px',
      fill: '#f39c12',
      stroke: '#2c3e50',
      strokeThickness: 2
    }).setOrigin(0.5);

    // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 2 gi√¢y
    this.time.delayedCall(2000, () => {
      notification.destroy();
    });
  }

  createItemButton(x, y, itemData) {
    // T·∫°o container ch√≠nh cho item button
    const itemButton = this.add.container(x, y);

    // K√≠ch th∆∞·ªõc item button: 120x120
    const buttonSize = 68;

    // 1. T·∫°o background bo tr√≤n b·∫±ng Graphics
    const backgroundItem = this.add.graphics();
    backgroundItem.fillStyle(0x6d6d6d, 1); // M√†u n·ªÅn t·ªëi
    backgroundItem.fillRoundedRect(-buttonSize / 2, -buttonSize / 2, buttonSize, buttonSize, 20);
    backgroundItem.setAlpha(0.5);

    // 2. T·∫°o h√¨nh ·∫£nh item  
    const itemImage = this.add.image(0, 0, itemData.image);
    itemImage.setDisplaySize(80, 80); // K√≠ch th∆∞·ªõc ·∫£nh nh·ªè h∆°n background

    // 3. T·∫°o text ƒë·∫øm ·ªü g√≥c tr√™n ph·∫£i
    const countText = this.add.text(buttonSize / 2, -buttonSize / 2, itemData.cooldown.toString(), {
      fontSize: '24px',
      fill: '#ffffff',
      fontFamily: 'Arial, sans-serif',
      fontWeight: 'bold',
      stroke: '#000000',
      strokeThickness: 5
    });
    countText.setOrigin(0.5);

    // Th√™m t·∫•t c·∫£ v√†o container
    itemButton.add([backgroundItem, itemImage, countText]);

    // L√†m cho container c√≥ th·ªÉ click
    itemButton.setSize(buttonSize, buttonSize);
    itemButton.setInteractive();

    // Hi·ªáu ·ª©ng hover
    itemButton.on('pointerover', () => {
      itemButton.setScale(1.1);
    });

    itemButton.on('pointerout', () => {
      itemButton.setScale(1);
    });

    // X·ª≠ l√Ω click
    itemButton.on('pointerdown', () => {
      this.useItem(itemData.name);
    });

    return itemButton;
  }

  /**
   * T·∫°o item buttons t·ª´ localStorage equipment data
   * @returns {Array} Array c√°c item button data
   */
  createItemButtonsFromStorage() {
    try {
      const savedEquipment = localStorage.getItem('equipment');
      if (savedEquipment && savedEquipment !== 'null') {
        const equipmentData = JSON.parse(savedEquipment);

        // Ki·ªÉm tra n·∫øu equipmentData l√† array v√† c√≥ d·ªØ li·ªáu
        if (Array.isArray(equipmentData) && equipmentData.length > 0) {
          // T·∫°o item buttons t·ª´ equipment data
          const itemButtons = equipmentData.map((nameId) => {
            // T·∫°o item m·ªõi t·ª´ itemFactory
            return itemFactory.createItem(nameId);

          });
          console.log('Item buttons created from equipment:', itemButtons);
          return itemButtons;
        }
      }
      // Fallback: n·∫øu kh√¥ng c√≥ equipment data, tr·∫£ v·ªÅ array r·ªóng
      console.log('No equipment data found, returning empty item buttons');
      return [];

    } catch (error) {
      console.error('Error creating item buttons from storage:', error);
      // Tr·∫£ v·ªÅ array r·ªóng n·∫øu c√≥ l·ªói
      return [];
    }
  }

}
